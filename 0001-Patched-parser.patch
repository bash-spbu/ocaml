From 07229cc05457ac31d3ca46f5ad0ef8b6f8f9f90d Mon Sep 17 00:00:00 2001
From: bash-spbu <bash.spbu@gmail.com>
Date: Mon, 1 Jun 2020 19:02:39 +0300
Subject: [PATCH] Patched parser

---
 parsing/parser.mly | 73 +++++++++++++++++++++++++++++++++++++---------
 1 file changed, 60 insertions(+), 13 deletions(-)

diff --git a/parsing/parser.mly b/parsing/parser.mly
index 6bfe8d234..ba65e564c 100644
--- a/parsing/parser.mly
+++ b/parsing/parser.mly
@@ -547,6 +547,12 @@ let mk_directive ~loc name arg =
       pdir_loc = make_loc loc;
     }
 
+let structured_name_to_ident = function
+  | Total_single   tag  -> "(|" ^ tag.txt ^ "|)"
+  | Partial_single tag  -> "(|" ^ tag.txt ^ "|_|)"
+  | Total_multi    tags -> 
+      "(|" ^ (String.concat "|" (List.map (fun t -> t.txt) tags)) ^ "|)"
+
 %}
 
 /* Tokens */
@@ -2341,7 +2347,17 @@ labeled_simple_expr:
     { xs }
 ;
 %inline let_ident:
-    val_ident { mkpatvar ~loc:$sloc $1 }
+  val_ident_pat { $1 }
+
+val_ident_pat:
+    LIDENT                    { mkpatvar ~loc:$sloc $1 }
+  | structured_name           { mkpat ~loc:$sloc (Ppat_structured_name(
+                                  mkrhs (structured_name_to_ident $1) $sloc, 
+                                  $1)) }
+  | LPAREN operator RPAREN    { mkpatvar ~loc:$sloc $2 }
+  | LPAREN operator error     { unclosed "(" $loc($1) ")" $loc($3) }
+  | LPAREN error              { expecting $loc($2) "operator" }
+  | LPAREN MODULE error       { expecting $loc($3) "module-expr" }
 ;
 let_binding_body:
     let_ident strict_binding
@@ -2577,22 +2593,27 @@ pattern_no_exn:
 ;
 
 pattern_gen:
-    simple_pattern
-      { $1 }
-  | mkpat(
-      mkrhs(constr_longident) pattern %prec prec_constr_appl
-        { Ppat_construct($1, Some $2) }
-    | name_tag pattern %prec prec_constr_appl
-        { Ppat_variant($1, Some $2) }
-    ) { $1 }
+  | simple_pattern { $1 }
+  | constr_gen     { $1 }
   | LAZY ext_attributes simple_pattern
       { mkpat_attrs ~loc:$sloc (Ppat_lazy $3) $2}
 ;
+
+constr_gen:
+  | mkrhs(constr_longident) pattern %prec prec_constr_appl 
+      { mkpat ~loc:$sloc (Ppat_construct($1, Some $2)) }
+  | name_tag                pattern %prec prec_constr_appl 
+      { mkpat ~loc:$sloc (Ppat_variant  ($1, Some $2)) }
+  | LESS mkrhs(constr_longident) nonempty_llist(simple_expr) GREATER pattern 
+      %prec prec_constr_appl 
+      { mkpat ~loc:$sloc (Ppat_parameterized($2, $3, $5)) }
+  | LESS mkrhs(constr_longident) nonempty_llist(simple_expr) error
+      { unclosed "<" $loc($1) ">" $loc($4) }
+;
+
 simple_pattern:
-    mkpat(mkrhs(val_ident) %prec below_EQUAL
-      { Ppat_var ($1) })
-      { $1 }
-  | simple_pattern_not_ident { $1 }
+    val_ident_pat %prec below_EQUAL { $1 }
+  | simple_pattern_not_ident        { $1 }
 ;
 
 simple_pattern_not_ident:
@@ -2620,6 +2641,12 @@ simple_pattern_not_ident:
       { Ppat_construct($1, None) }
   | name_tag
       { Ppat_variant($1, None) }
+  | LESS mkrhs(constr_longident) nonempty_llist(simple_expr) GREATER
+      { let unit_loc = ($endpos, $endpos) in
+        Ppat_parameterized(
+          $2, $3, 
+          ghpat ~loc:(unit_loc) 
+            (Ppat_construct(ghrhs (Lident "()") unit_loc, None))) }
   | HASH mkrhs(type_longident)
       { Ppat_type ($2) }
   | mkrhs(mod_longident) DOT simple_delimited_pattern
@@ -2701,6 +2728,25 @@ pattern_comma_list(self):
     }
 ;
 
+structured_name:
+    LPAREN structured_name_tags BAR RPAREN
+      { match $2 with
+        | []  -> assert false
+        | [x] -> Total_single x 
+        | xs  -> Total_multi  (List.rev xs) }
+  | LPAREN structured_name_tags BAR UNDERSCORE BAR RPAREN
+      { match $2 with
+        | []  -> assert false
+        | [x] -> Partial_single x 
+        | _   -> not_expecting $loc($4)
+            "wildcard \"_\" because partial multi patterns are unsupported" }
+
+structured_name_tags: 
+  | BAR mkrhs(UIDENT)
+      { [$2] }
+  | structured_name_tags BAR mkrhs(UIDENT)
+      { $3 :: $1 }
+
 /* Value descriptions */
 
 value_description:
@@ -3344,6 +3390,7 @@ ident:
 ;
 val_ident:
     LIDENT                    { $1 }
+  | structured_name           { structured_name_to_ident $1 }
   | LPAREN operator RPAREN    { $2 }
   | LPAREN operator error     { unclosed "(" $loc($1) ")" $loc($3) }
   | LPAREN error              { expecting $loc($2) "operator" }
-- 
2.25.1

